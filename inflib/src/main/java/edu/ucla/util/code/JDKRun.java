package edu.ucla.util.code;

import java.io.*;
import java.util.regex.*;

/** @author Keith Cascio
	@since 032405 */
public class JDKRun extends JDKToolScript implements Script
{
	public String getName(){
		return "run";
	}

	public String getDescriptionComment(){
		return "This script runs Java classes generated by Code Bandit";
	}

	public String getUsage(){
		return "<*.class files>";
	}

	public String getUsageExample(){
		return "FooTutorial";
	}

	public String getDefaultFileName(){
		return "cbrun";
	}

	protected String getMessageSuccess( String argsFlat ){
		return "Finished running " + argsFlat;
	}

	protected String getDescription( String argsFlat ){
		return "Execution of " + argsFlat;
	}

	public String[] getCommandArray( ScriptGenius genius, SystemSoftwareSource source ) throws Exception{
		File javapath = source.getExecutablePath( JDKTool.getJavaTool() );
		if( javapath == null ) throw new Exception( JDKTool.getJavaTool().getDescriptionShort() + " not found" );

		File classpathinflib = source.getClasspath( ClassModule.getInflibModule() );
		if( classpathinflib == null ) throw new Exception( ClassModule.getInflibModule().getDescriptionShort() + " not found" );

		String[] cmdarray = new String[]{
			javapath.getAbsolutePath(),
			"-classpath",
			"." + File.pathSeparator + classpathinflib.getAbsolutePath()
		};

		return cmdarray;
	}

	protected SoftwareEntity[] makeDependencies(){
		return new SoftwareEntity[] { ClassModule.getInflibModule(), JDKTool.getJavaTool() };
	}

	/** @since 040105 */
	public static class CompiledClassInfo{
		public CompiledClassInfo( File source ){
			this.sourcefile = source;
			init();
		}

		private void init(){
			String absolute = sourcefile.getAbsolutePath();

			Matcher matcher = getPathPattern().matcher( absolute );

			if( !matcher.matches() ) error = "source path wrong syntax";

			String prefix = matcher.group(1);

			directory = new File( prefix );
			classname = matcher.group(3);

			classfile = new File( prefix + classname + ".class" );

			if( !classfile.exists() ) error = classfile.getAbsolutePath() + " not found.  Compile " + absolute + ".";

			if( classfile.lastModified() < sourcefile.lastModified() )
				error = classfile.getAbsolutePath() + " is older than " + absolute + ".  Recompile.";
		}

		public File sourcefile;
		public File directory;
		public File classfile;
		public String classname;
		public String error;
	}

	public static final String SEP = ParanoidFileFinder.getFileSeparatorUnicode();
	public static final String REGEX_JAVA_SOURCE_PATH = "^(.*" + SEP + ")(([^"+SEP+"]+)\\.java)$";
	private static Pattern PATTERN_JAVA_SOURCE_PATH;

	/** @since 040105 */
	public static Pattern getPathPattern(){
		if( PATTERN_JAVA_SOURCE_PATH == null ) PATTERN_JAVA_SOURCE_PATH = Pattern.compile( REGEX_JAVA_SOURCE_PATH );
		return PATTERN_JAVA_SOURCE_PATH;
	}
}
