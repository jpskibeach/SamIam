/* Generated By:JavaCC: Do not edit this line. HuginLogReaderTokenManager.java */
package edu.ucla.belief.io.hugin;
import java.util.*;
import java.io.*;
import edu.ucla.belief.*;
import edu.ucla.belief.io.*;
//{superfluous} import java.text.DecimalFormat;

public class HuginLogReaderTokenManager implements HuginLogReaderConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xefdfffc0L) != 0L)
         {
            jjmatchedKind = 32;
            return 6;
         }
         return -1;
      case 1:
         if ((active0 & 0xefdfffc0L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 6;
         }
         return -1;
      case 2:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xeddffec0L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
            return 6;
         }
         if ((active0 & 0x100L) != 0L)
            return 6;
         return -1;
      case 3:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x40000000L) != 0L)
            return 6;
         if ((active0 & 0xad5ffec0L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
            return 6;
         }
         return -1;
      case 4:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0xad5ff6c0L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 4;
            return 6;
         }
         return -1;
      case 5:
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x419040L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x40c0000L) != 0L)
            return 6;
         if ((active0 & 0xa9126680L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return 6;
         }
         return -1;
      case 6:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x419040L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x4040000L) != 0L)
            return 6;
         if ((active0 & 0xa1126680L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 6;
            }
            return 6;
         }
         return -1;
      case 7:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x419040L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x80L) != 0L)
            return 6;
         if ((active0 & 0xa1026200L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 7;
            return 6;
         }
         return -1;
      case 8:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x100000L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x81004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x419040L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x20022200L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 8;
            return 6;
         }
         return -1;
      case 9:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x81004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x419040L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x20022200L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 9;
            return 6;
         }
         return -1;
      case 10:
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x20200L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 10;
            return 6;
         }
         if ((active0 & 0x419040L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x2000L) != 0L)
            return 6;
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x81004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x2000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x81004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x419040L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 11;
            return 6;
         }
         return -1;
      case 12:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x81004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 12;
            return 6;
         }
         return -1;
      case 13:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x81004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 14:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x81004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 15:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x81004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 16:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x81004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 17:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x81004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 18:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 19:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            if (jjmatchedPos < 2)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 2;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 20:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x20000L) != 0L)
         {
            if (jjmatchedPos < 10)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 10;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 21:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x1004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 22:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 23:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1004000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x419000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 24:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 25:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 26:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 27:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 28:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 29:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 30:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 31:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 32:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 33:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x1000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         if ((active0 & 0x800L) != 0L)
         {
            if (jjmatchedPos < 3)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 3;
            }
            return -1;
         }
         if ((active0 & 0x200L) != 0L)
         {
            if (jjmatchedPos < 12)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 12;
            }
            return -1;
         }
         return -1;
      case 34:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 35:
         if ((active0 & 0x20000000L) != 0L)
         {
            if (jjmatchedPos < 9)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 9;
            }
            return -1;
         }
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 36:
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 37:
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 38:
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 39:
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 40:
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 41:
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 42:
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 43:
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 44:
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 45:
         if ((active0 & 0x19000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 46:
         if ((active0 & 0x11000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 47:
         if ((active0 & 0x11000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 48:
         if ((active0 & 0x11000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 49:
         if ((active0 & 0x11000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 50:
         if ((active0 & 0x11000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 51:
         if ((active0 & 0x11000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 52:
         if ((active0 & 0x11000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 53:
         if ((active0 & 0x11000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 54:
         if ((active0 & 0x11000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      case 55:
         if ((active0 & 0x1000L) != 0L)
         {
            if (jjmatchedPos < 4)
            {
               jjmatchedKind = 32;
               jjmatchedPos = 4;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 41:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 44:
         return jjStopAtPos(0, 35);
      case 58:
         return jjStopAtPos(0, 34);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x50c4000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x22000L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0xc0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x40000000L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0xc10a00L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x82000100L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x100400L);
      case 125:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 44:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100400L);
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x800800L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40e2000L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40418040L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x1004200L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0xa2001000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x2200000L);
      case 40:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 100:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(2, 8, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1804000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x40e3a00L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100400L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0xa0000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x410000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1414240L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x100400L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0000000L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x22000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x9000L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x40c0000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000080L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x10200000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa5_0(active0, 0x800L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10200000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x8100400L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0001000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x22000L);
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x410040L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x1004000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40c0000L);
      case 121:
         return jjMoveStringLiteralDfa5_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x419040L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x10200000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
         {
            jjmatchedKind = 19;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x4040000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x1004080L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0xa0022000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x100400L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 44:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x22000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x410000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x10200040L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x20001000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x1804080L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x800L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x140400L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x2008000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0xa100000L);
      case 58:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(7, 18);
         break;
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x30200000L);
      case 103:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 7, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x1004000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1040L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x400200L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x22000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x91204000L);
      case 40:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(8, 20);
         break;
      case 46:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x42a000L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x20001040L);
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0x8010000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private final int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 102:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x801000L);
      case 106:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000L);
      case 107:
         return jjMoveStringLiteralDfa10_0(active0, 0x40L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x20800L);
      case 113:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x10200000L);
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0xa0010200L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private final int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa11_0(active0, 0x20010000L);
      case 46:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(10, 25);
         break;
      case 103:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(10, 13, 6);
         break;
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x10204200L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x28800L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x80800000L);
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x1400000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private final int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa12_0(active0, 0x80020000L);
      case 58:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(11, 6);
         break;
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x400800L);
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x1800200L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x20010000L);
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000L);
      case 122:
         return jjMoveStringLiteralDfa12_0(active0, 0x10200000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private final int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa13_0(active0, 0xc00000L);
      case 99:
         return jjMoveStringLiteralDfa13_0(active0, 0x81000000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0x10200000L);
      case 102:
         return jjMoveStringLiteralDfa13_0(active0, 0x20010000L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x200L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x800L);
      case 114:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000L);
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private final int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa14_0(active0, 0x30211200L);
      case 45:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000L);
      case 102:
         return jjMoveStringLiteralDfa14_0(active0, 0x800000L);
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x80008000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x1400800L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private final int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa15_0(active0, 0x800L);
      case 61:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(14, 21);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(14, 28);
         break;
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x408000L);
      case 102:
         return jjMoveStringLiteralDfa15_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x81004000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x800000L);
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000200L);
      case 113:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x8010000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private final int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x1800L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x21000000L);
      case 113:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x810200L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private final int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa17_0(active0, 0x4000L);
      case 100:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa17_0(active0, 0x820000L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x18200L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x401000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000L);
      case 117:
         return jjMoveStringLiteralDfa17_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private final int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa18_0(active0, 0x9000800L);
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000L);
      case 98:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(17, 31);
         return jjMoveStringLiteralDfa18_0(active0, 0x20400000L);
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0x1000L);
      case 109:
         return jjMoveStringLiteralDfa18_0(active0, 0x200L);
      case 110:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private final int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000L);
      case 45:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa19_0(active0, 0x800L);
      case 98:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000L);
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x4200L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x20018000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x1800000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private final int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active0, 0x8a00L);
      case 58:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(19, 23);
         break;
      case 101:
         return jjMoveStringLiteralDfa20_0(active0, 0x20000L);
      case 103:
         return jjMoveStringLiteralDfa20_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa20_0(active0, 0x1000000L);
      case 115:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000L);
      case 116:
         return jjMoveStringLiteralDfa20_0(active0, 0x20004000L);
      case 121:
         return jjMoveStringLiteralDfa20_0(active0, 0x8000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private final int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000L);
      case 58:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(20, 17);
         break;
      case 99:
         return jjMoveStringLiteralDfa21_0(active0, 0xa00L);
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000000L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x20400000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa21_0(active0, 0x10000L);
      case 119:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private final int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa22_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa22_0(active0, 0x1004000L);
      case 102:
         return jjMoveStringLiteralDfa22_0(active0, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0x10800L);
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x200L);
      case 122:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000L);
      case 123:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(21, 27);
         break;
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private final int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa23_0(active0, 0x1008000L);
      case 97:
         return jjMoveStringLiteralDfa23_0(active0, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa23_0(active0, 0x404000L);
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x800L);
      case 108:
         return jjMoveStringLiteralDfa23_0(active0, 0x20000000L);
      case 109:
         return jjMoveStringLiteralDfa23_0(active0, 0x200L);
      case 119:
         return jjMoveStringLiteralDfa23_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private final int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(23, 22);
         break;
      case 101:
         return jjMoveStringLiteralDfa24_0(active0, 0x1000L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(23, 14);
         break;
      case 112:
         return jjMoveStringLiteralDfa24_0(active0, 0x8200L);
      case 113:
         return jjMoveStringLiteralDfa24_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa24_0(active0, 0x20000000L);
      case 116:
         return jjMoveStringLiteralDfa24_0(active0, 0x10000L);
      case 119:
         return jjMoveStringLiteralDfa24_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private final int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa25_0(active0, 0x20000000L);
      case 105:
         return jjMoveStringLiteralDfa25_0(active0, 0x1011000L);
      case 111:
         return jjMoveStringLiteralDfa25_0(active0, 0x200L);
      case 114:
         return jjMoveStringLiteralDfa25_0(active0, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa25_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
private final int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa26_0(active0, 0x800L);
      case 103:
         return jjMoveStringLiteralDfa26_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa26_0(active0, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa26_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa26_0(active0, 0x21000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
private final int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa27_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa27_0(active0, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa27_0(active0, 0x1001000L);
      case 109:
         return jjMoveStringLiteralDfa27_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa27_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa27_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
private final int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa28_0(active0, 0x21010000L);
      case 101:
         return jjMoveStringLiteralDfa28_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa28_0(active0, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa28_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa28_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
private final int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa29_0(active0, 0x9000L);
      case 99:
         return jjMoveStringLiteralDfa29_0(active0, 0x21000000L);
      case 102:
         return jjMoveStringLiteralDfa29_0(active0, 0x10800L);
      case 116:
         return jjMoveStringLiteralDfa29_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
private final int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa30_0(active0, 0xa00L);
      case 99:
         return jjMoveStringLiteralDfa30_0(active0, 0x8000L);
      case 104:
         return jjMoveStringLiteralDfa30_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa30_0(active0, 0x21000000L);
      case 111:
         return jjMoveStringLiteralDfa30_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
private final int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa31_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa31_0(active0, 0x1000L);
      case 105:
         return jjMoveStringLiteralDfa31_0(active0, 0x21000000L);
      case 111:
         return jjMoveStringLiteralDfa31_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa31_0(active0, 0x10000L);
      case 119:
         return jjMoveStringLiteralDfa31_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
private final int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa32_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa32_0(active0, 0x200L);
      case 109:
         return jjMoveStringLiteralDfa32_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa32_0(active0, 0x800L);
      case 113:
         return jjMoveStringLiteralDfa32_0(active0, 0x21000000L);
      case 117:
         return jjMoveStringLiteralDfa32_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
private final int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa33_0(active0, 0x10000L);
      case 112:
         return jjMoveStringLiteralDfa33_0(active0, 0x8000L);
      case 114:
         return jjMoveStringLiteralDfa33_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa33_0(active0, 0x800L);
      case 116:
         return jjMoveStringLiteralDfa33_0(active0, 0x200L);
      case 117:
         return jjMoveStringLiteralDfa33_0(active0, 0x21000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
private final int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(33, 24);
         return jjMoveStringLiteralDfa34_0(active0, 0x20000000L);
      case 104:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(33, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa34_0(active0, 0x1000L);
      case 108:
         return jjMoveStringLiteralDfa34_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa34_0(active0, 0x8000L);
      case 116:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(33, 11);
         break;
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
private final int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa35_0(active0, 0x10000L);
      case 110:
         return jjMoveStringLiteralDfa35_0(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa35_0(active0, 0x20001000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
private final int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa36_0(active0, 0x10000L);
      case 58:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(35, 29);
         break;
      case 101:
         return jjMoveStringLiteralDfa36_0(active0, 0x8000L);
      case 116:
         return jjMoveStringLiteralDfa36_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
private final int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa37_0(active0, 0x1000L);
      case 110:
         return jjMoveStringLiteralDfa37_0(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa37_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
private final int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa38_0(active0, 0x1000L);
      case 114:
         return jjMoveStringLiteralDfa38_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa38_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
private final int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0);
      return 38;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa39_0(active0, 0x9000L);
      case 105:
         return jjMoveStringLiteralDfa39_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0);
}
private final int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0);
      return 39;
   }
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa40_0(active0, 0x1000L);
      case 109:
         return jjMoveStringLiteralDfa40_0(active0, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa40_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0);
}
private final int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0);
      return 40;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa41_0(active0, 0x10000L);
      case 102:
         return jjMoveStringLiteralDfa41_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa41_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0);
}
private final int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0);
      return 41;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa42_0(active0, 0x18000L);
      case 114:
         return jjMoveStringLiteralDfa42_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0);
}
private final int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0);
      return 42;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa43_0(active0, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa43_0(active0, 0x18000L);
      default :
         break;
   }
   return jjStartNfa_0(41, active0);
}
private final int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(41, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, active0);
      return 43;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa44_0(active0, 0x18000L);
      case 116:
         return jjMoveStringLiteralDfa44_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(42, active0);
}
private final int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(42, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, active0);
      return 44;
   }
   switch(curChar)
   {
      case 109:
         return jjMoveStringLiteralDfa45_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa45_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa45_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(43, active0);
}
private final int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(43, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(44, active0);
      return 45;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa46_0(active0, 0x1000L);
      case 112:
         return jjMoveStringLiteralDfa46_0(active0, 0x10000L);
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(45, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(44, active0);
}
private final int jjMoveStringLiteralDfa46_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(44, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(45, active0);
      return 46;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa47_0(active0, 0x1000L);
      case 111:
         return jjMoveStringLiteralDfa47_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(45, active0);
}
private final int jjMoveStringLiteralDfa47_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(45, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(46, active0);
      return 47;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa48_0(active0, 0x11000L);
      default :
         break;
   }
   return jjStartNfa_0(46, active0);
}
private final int jjMoveStringLiteralDfa48_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(46, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(47, active0);
      return 48;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa49_0(active0, 0x10000L);
      case 103:
         return jjMoveStringLiteralDfa49_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(47, active0);
}
private final int jjMoveStringLiteralDfa49_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(47, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(48, active0);
      return 49;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa50_0(active0, 0x10000L);
      case 117:
         return jjMoveStringLiteralDfa50_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(48, active0);
}
private final int jjMoveStringLiteralDfa50_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(48, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(49, active0);
      return 50;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa51_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa51_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(49, active0);
}
private final int jjMoveStringLiteralDfa51_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(49, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(50, active0);
      return 51;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa52_0(active0, 0x1000L);
      case 115:
         return jjMoveStringLiteralDfa52_0(active0, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(50, active0);
}
private final int jjMoveStringLiteralDfa52_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(50, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(51, active0);
      return 52;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa53_0(active0, 0x10000L);
      case 116:
         return jjMoveStringLiteralDfa53_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(51, active0);
}
private final int jjMoveStringLiteralDfa53_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(51, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(52, active0);
      return 53;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa54_0(active0, 0x11000L);
      default :
         break;
   }
   return jjStartNfa_0(52, active0);
}
private final int jjMoveStringLiteralDfa54_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(52, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(53, active0);
      return 54;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa55_0(active0, 0x1000L);
      case 115:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(54, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(53, active0);
}
private final int jjMoveStringLiteralDfa55_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(53, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(54, active0);
      return 55;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa56_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(54, active0);
}
private final int jjMoveStringLiteralDfa56_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(54, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(55, active0);
      return 56;
   }
   switch(curChar)
   {
      case 58:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(56, 12);
         break;
      default :
         break;
   }
   return jjStartNfa_0(55, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 16;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 33)
                        kind = 33;
                     jjCheckNAddStates(0, 3);
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(9);
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(8, 13);
                  else if (curChar == 37)
                     jjCheckNAddStates(4, 6);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(4, 6);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if ((0x3ff400000000000L & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 7:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(8, 13);
                  break;
               case 8:
                  if (curChar == 46)
                     jjCheckNAdd(9);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(9, 10);
                  break;
               case 11:
                  if (curChar == 45)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddStates(0, 3);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(14, 10);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(6);
                  break;
               case 1:
                  jjAddStates(4, 6);
                  break;
               case 10:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(7, 8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(4, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 16 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   14, 15, 8, 10, 1, 2, 4, 11, 12, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, 
"\115\157\162\141\154\40\154\151\156\153\163\72", "\115\141\162\162\171\151\156\147", "\141\156\144", 
"\124\162\151\141\156\147\165\154\141\164\151\156\147\40\160\162\151\155\145\40\143\157\155\160\157\156\145\156\164\40\167\151\164\150", "\155\145\155\142\145\162\163\72", 
"\124\150\151\163\40\143\157\155\160\157\156\145\156\164\40\151\163\40\141\40\143\154\151\161\165\145\40\157\146\40\143\157\163\164", 
"\125\163\151\156\147\40\155\151\156\151\155\165\155\40\146\151\154\154\55\151\156\40\167\145\151\147\150\164\40\150\145\165\162\151\163\164\151\143\40\146\157\162\40\164\162\151\141\156\147\165\154\141\164\151\157\156\72", "\105\154\151\155\151\156\141\164\151\156\147", 
"\103\162\145\141\164\151\156\147\40\146\151\154\154\55\151\156\40\142\145\164\167\145\145\156", 
"\106\157\165\156\144\40\164\162\151\141\156\147\165\154\141\164\151\157\156\40\157\146\40\160\162\151\155\145\40\143\157\155\160\157\156\145\156\164\40\157\146\40\143\157\163\164", 
"\124\157\164\141\154\40\143\157\163\164\40\157\146\40\164\162\151\141\156\147\165\154\141\164\151\157\156\40\146\157\162\40\141\154\154\40\160\162\151\155\145\40\143\157\155\160\157\156\145\156\164\163\40\151\163", 
"\105\154\151\155\151\156\141\164\151\157\156\40\163\145\161\165\145\156\143\145\72", "\103\154\151\161\165\145\163\72", "\103\154\151\161\165\145", 
"\155\145\155\142\145\162\163\40\50", "\51\54\40\164\141\142\154\145\40\163\151\172\145\40\75", 
"\124\157\164\141\154\40\143\154\151\161\165\145\40\164\141\142\154\145\40\163\151\172\145\72", 
"\124\150\145\40\152\165\156\143\164\151\157\156\40\146\157\162\145\163\164\72", 
"\103\162\145\141\164\151\156\147\40\152\165\156\143\164\151\157\156\40\164\162\145\145\40\167\151\164\150\40\143\154\151\161\165\145", "\141\163\40\162\157\157\164\40\56\56\56", "\103\154\151\161\165\145\163", 
"\154\151\156\153\145\144\54\40\163\145\160\141\162\141\164\145\144\40\142\171\40\173", "\175\40\50\164\141\142\154\145\40\163\151\172\145\40\75", 
"\101\163\163\151\147\156\155\145\156\164\40\157\146\40\160\157\164\145\156\164\151\141\154\163\40\164\157\40\143\154\151\161\165\145\163\72", "\116\157\144\145", 
"\141\163\163\151\147\156\145\144\40\164\157\40\143\154\151\161\165\145", null, null, "\72", "\54", "\51", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x1fffffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static final long[] jjtoSpecial = {
   0x20L, 
};
private SimpleCharStream input_stream;
private final int[] jjrounds = new int[16];
private final int[] jjstateSet = new int[32];
protected char curChar;
public HuginLogReaderTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public HuginLogReaderTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 16; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
