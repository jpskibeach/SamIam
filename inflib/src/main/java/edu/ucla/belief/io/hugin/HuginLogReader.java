/* Generated By:JavaCC: Do not edit this line. HuginLogReader.java */
package edu.ucla.belief.io.hugin;

import java.util.*;
import java.io.*;
import edu.ucla.belief.*;
import edu.ucla.belief.io.*;
import java.text.DecimalFormat;

/** HuginLogReader - a class that parses
	Hugin ".hlg" files
	and returns a String
	representation of a dtree.

	@author keith cascio
	@since  20021206 */
public class HuginLogReader implements HuginLogReaderConstants {
        public static boolean FLAG_DEBUG = false;

        public static final String STR_PAREN_LEFT = "( ";
        public static final String STR_DELIMITER = " ";
        public static final String STR_PAREN_RIGHT = " )";

    public static void main(String args[])
    {
                try
                {
                        for(int i=0;i<args.length;i++)
                        {
                        Definitions.STREAM_TEST.println( "\n\nParsing file: \"" + args[i] + "\" ..." );
                                HuginLogReader reader = new HuginLogReader(new java.io.FileReader(new File(args[i])));
                                Definitions.STREAM_TEST.println( "\nDtree:\n\n" + reader.dtree() );
                        }
                } catch(Exception e)
                {
                        System.err.println(e);
                        e.printStackTrace();
                }
        }

        /**
		@return A 2 dimensional array defining the
		parent/child tree structure.
	*/
        public boolean[][]      getJoinForest()
        {
                return myJoinForest;
        }

        /**
		@return A List of Integers designating the roots of the
		join trees that make up the join forest.
	*/
        public int[]    getChildCounts()
        {
                return myChildCounts;
        }

        /**
		@return A List of Integers designating the roots of the
		join trees that make up the join forest.
	*/
        public List getRoots()
        {
                return myRoots;
        }

        /**
		@return A List of Strings, which are variable IDs.
	*/
        public List getEliminationOrder()
        {
                return myEliminationOrder;
        }

        /**
		@return A List of HuginCliques.
	*/
        public List getCliques()
        {
                return myCliques;
        }

        /**
		@return A array of Lists of Strings, which are the variable IDs.
	*/
        public List[]   getAssignments()
        {
                return myAssignments;
        }

        public String dtree() throws ParseException
        {
                return dtree( true );
        }

        public String dtree( boolean balanced ) throws ParseException
        {
                parse();
                return makeDtree( balanced );
        }

        /**
		@since 121702
	*/
        public long getTotalCliqueTableSize()
        {
                return myTotalCliqueTableSize;
        }

        /**
		@since 121702
	*/
        public long getTotalSeparatorTableSize()
        {
                return myTotalSeparatorTableSize;
        }

        protected long myTotalCliqueTableSize = (long)0;
        protected long myTotalSeparatorTableSize = (long)0;
        protected boolean[][] myJoinForest;
        protected int[] myChildCounts;
        protected List myRoots;
        protected List[] myAssignments;
        protected int myCurrentRowIndex;
        protected List myEliminationOrder;
        protected List myCliques;

        protected static DecimalFormat theFormat = new DecimalFormat( "000" );

  void printStats() throws ParseException {
        Definitions.STREAM_VERBOSE.println( "\n\nparsed junction tree:\nroots: " + myRoots );
        for( int i=1; i<myChildCounts.length; i++ )
        {
                Definitions.STREAM_VERBOSE.println( "#" + theFormat.format( i ) + " -> |" + myChildCounts[i] + "| : " + myAssignments[i] );
        }
        Definitions.STREAM_VERBOSE.println( "\n" );
  }

  String makeDtree(boolean balanced) throws ParseException {
        if( FLAG_DEBUG ) printStats();

        String ret;
        int intRoot;

        Iterator it = myRoots.iterator();
        if( it.hasNext() )
        {
                intRoot = ((Integer)it.next()).intValue();
                ret = balanced ? makeDtreeRec( intRoot ) : makeDtreeRecUnbalanced( intRoot );
        }
        else return "";

        String dtreerec;
        while( it.hasNext() )
        {
                intRoot = ((Integer)it.next()).intValue();
                dtreerec = balanced ? makeDtreeRec( intRoot ) : makeDtreeRecUnbalanced( intRoot );
                ret = STR_PAREN_LEFT + ret + STR_DELIMITER + dtreerec + STR_PAREN_RIGHT;
        }

        return ret;
  }

  String makeDtreeRec(int root) throws ParseException {
        if( FLAG_DEBUG ) Definitions.STREAM_VERBOSE.println( "makeDtreeRec( #"+root+" )" );

        List families = myAssignments[root];
        String right = makeFamiliesSubtreeRec( families, (int)0, families.size()-1 );

        String left = expandChildrenRec( root, (int)0, myChildCounts[root] );

        if( right == null && left == null ) return "";
        else if( right == null ) return left;
        else if( left == null ) return right;
        else return STR_PAREN_LEFT + left + STR_DELIMITER + right + STR_PAREN_RIGHT;
  }

  String expandChildrenRec(int root, int index1, int numchildren) throws ParseException {
        //int currentid = callID++;
        if( FLAG_DEBUG ) Definitions.STREAM_VERBOSE.println( "expandChildrenRec( #"+root+", "+index1+", "+numchildren+" ) " );

        if( numchildren == 0 ) return null;
        if( numchildren == 1 )
        {
                boolean[] row = myJoinForest[root];
                while( !row[index1] ) ++index1;
                if( FLAG_DEBUG ) Definitions.STREAM_VERBOSE.println( "\t#" + root + " -> #" + index1 );
                String ret = makeDtreeRec( index1 );
                myCurrentRowIndex = index1+1;
                return ret;
        }
        else
        {
                int leftchildren = numchildren >> 1;
                int rightchildren = numchildren - leftchildren;
                if( FLAG_DEBUG ) Definitions.STREAM_VERBOSE.println( "\t#" + root + " left |" + leftchildren + "| from " + index1 );
                String left = expandChildrenRec( root, index1, leftchildren );
                if( FLAG_DEBUG ) Definitions.STREAM_VERBOSE.println( "\t#" + root + " rght |" + rightchildren + "| from " + myCurrentRowIndex );
                String right = expandChildrenRec( root, myCurrentRowIndex, rightchildren );
                //myCurrentRowIndex = 0;
                return STR_PAREN_LEFT + left + STR_DELIMITER + right + STR_PAREN_RIGHT;
        }
  }

  String makeFamiliesSubtreeRec(List list, int index1, int index2) throws ParseException {
        //Definitions.STREAM_VERBOSE.println( "makeFamiliesSubtreeRec( "+ list+", "+ index1+", "+ index2+" )" );

        int difference = index2 - index1;

        if( difference == 0 )
        {
                return (String) list.get( index1 );
        }
        else if( difference == 1 )
        {
                return STR_PAREN_LEFT + (String) list.get( index1 ) + STR_DELIMITER + (String) list.get( index2 ) + STR_PAREN_RIGHT;
        }
        else if( difference > 1 )
        {
                int indexinter = index1 + ( difference >> 1 );
                return STR_PAREN_LEFT + makeFamiliesSubtreeRec( list, index1, indexinter ) + STR_DELIMITER + makeFamiliesSubtreeRec( list, indexinter+1, index2 ) + STR_PAREN_RIGHT;
        }
        else return null;
  }

  String makeDtreeRecUnbalanced(int root) throws ParseException {
        String ret = makeFamiliesSubtreeUnbalanced( myAssignments[root] );

        boolean[] row = myJoinForest[root];

        String recDtree;
        for( int i=0; i<row.length; i++ )
        {
                if( row[i] )
                {
                        recDtree = makeDtreeRecUnbalanced( i );
                        if( ret == null ) ret = recDtree;
                        else ret = STR_PAREN_LEFT + ret + STR_DELIMITER + recDtree + STR_PAREN_RIGHT;
                }
        }

        return ret;
  }

  String makeFamiliesSubtreeUnbalanced(List list) throws ParseException {
        String ret = null;

        Iterator it = list.iterator();
        if( it.hasNext() ) ret = it.next().toString();
        while( it.hasNext() ) ret = STR_PAREN_LEFT + ret + STR_DELIMITER + it.next().toString() + STR_PAREN_RIGHT;

        return ret;
  }

/**
	@author Keith Cascio
	@since 121302
*/
  final public void parse() throws ParseException {
        int numcliques;
    dateBlock();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MORAL_LIT1:
      moralBlock();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRIAGULATE_LIT1:
      triangulateBlock();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELIMINATION_LIT:
      myEliminationOrder = eliminationBlock();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
    numcliques = cliquesBlock();
    forestBlock(numcliques);
    myAssignments = assignmentsBlock(numcliques);

  }

  final public int dateBlock() throws ParseException {
    jj_consume_token(ID);
    jj_consume_token(ID);
    jj_consume_token(NUM);
    jj_consume_token(NUM);
    jj_consume_token(34);
    jj_consume_token(NUM);
    jj_consume_token(34);
    jj_consume_token(NUM);
    jj_consume_token(NUM);
                {if (true) return (int)0;}
    throw new Error("Missing return statement in function");
  }

  final public int moralBlock() throws ParseException {
    jj_consume_token(MORAL_LIT1);
    label_1:
    while (true) {
      jj_consume_token(MORAL_LIT2);
      jj_consume_token(ID);
      jj_consume_token(AND_LIT);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MORAL_LIT2:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
    }
                {if (true) return (int)0;}
    throw new Error("Missing return statement in function");
  }

  final public int triangulateBlock() throws ParseException {
    label_2:
    while (true) {
      jj_consume_token(TRIAGULATE_LIT1);
      jj_consume_token(NUM);
      jj_consume_token(TRIAGULATE_LIT2);
      idList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRIAGULATE_LIT3:
        jj_consume_token(TRIAGULATE_LIT3);
        jj_consume_token(NUM);
        break;
      case TRIANGULATE_LIT5:
        jj_consume_token(TRIANGULATE_LIT5);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRIANGULATE_LIT6:
          case TRIANGULATE_LIT7:
            ;
            break;
          default:
            jj_la1[4] = jj_gen;
            break label_3;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TRIANGULATE_LIT6:
            jj_consume_token(TRIANGULATE_LIT6);
            jj_consume_token(ID);
            break;
          case TRIANGULATE_LIT7:
            jj_consume_token(TRIANGULATE_LIT7);
            jj_consume_token(ID);
            jj_consume_token(AND_LIT);
            jj_consume_token(ID);
            break;
          default:
            jj_la1[5] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        jj_consume_token(TRIANGULATE_LIT8);
        jj_consume_token(NUM);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRIAGULATE_LIT1:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRIAGULATE_LIT4:
      jj_consume_token(TRIAGULATE_LIT4);
      jj_consume_token(NUM);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
                {if (true) return (int)0;}
    throw new Error("Missing return statement in function");
  }

  final public List idList() throws ParseException {
        Token t;
        List ret = new LinkedList();
    t = jj_consume_token(ID);
                 ret.add( t.image );
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 35:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(35);
      t = jj_consume_token(ID);
                                                      ret.add( t.image );
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public List eliminationBlock() throws ParseException {
        Token t;
        List ret = new LinkedList();
    jj_consume_token(ELIMINATION_LIT);
    label_5:
    while (true) {
      t = jj_consume_token(ID);
                ret.add( t.image );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_5;
      }
    }
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public int cliquesBlock() throws ParseException {
        Token tokenID;
        Token tokenTableSize;
        int max = (int)0;
        int id = (int)0;
        int tableSize = (int)0;
        List members = null;
        Token tcts;
        myCliques = new LinkedList();
    jj_consume_token(CLIQUES_LIT1);
    label_6:
    while (true) {
      jj_consume_token(CLIQUE_DECL_LIT1);
      tokenID = jj_consume_token(NUM);
      jj_consume_token(35);
      jj_consume_token(NUM);
      jj_consume_token(CLIQUE_DECL_LIT2);
      members = idList();
      jj_consume_token(CLIQUE_DECL_LIT3);
      tokenTableSize = jj_consume_token(NUM);
                        id = Integer.parseInt( tokenID.image );
                        max = Math.max( max, id );
                        tableSize = Integer.parseInt( tokenTableSize.image );
                        myCliques.add( new HuginClique( id, members, tableSize ) );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLIQUE_DECL_LIT1:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_6;
      }
    }
    jj_consume_token(CLIQUES_LIT2);
    tcts = jj_consume_token(NUM);
                //Definitions.STREAM_VERBOSE.println( "\tokenID cliquesBlock() == " + max );
                myTotalCliqueTableSize = Long.parseLong( tcts.image );
                {if (true) return max;}
    throw new Error("Missing return statement in function");
  }

  final public void forestBlock(int numcliques) throws ParseException {
        Token t;
        myRoots = new LinkedList();
        int arraydim = numcliques+1;
        myJoinForest = new boolean[arraydim][arraydim];
        myChildCounts = new int[arraydim];
        Arrays.fill( myChildCounts, (int)0 );
        Token tokenParent;
        Token tokenChild;
        Token tokenSepTableSize;
        int parentnum;
        int childnum;
    jj_consume_token(JUNCTION_FOREST_LIT);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case JUNCTION_TREE_DECL_LIT1:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_7;
      }
      jj_consume_token(JUNCTION_TREE_DECL_LIT1);
      t = jj_consume_token(NUM);
      jj_consume_token(JUNCTION_TREE_DECL_LIT2);
                        myRoots.add( Integer.valueOf( t.image ) );
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LINK_DECL_LIT1:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_8;
        }
        jj_consume_token(LINK_DECL_LIT1);
        tokenChild = jj_consume_token(NUM);
        jj_consume_token(AND_LIT);
        tokenParent = jj_consume_token(NUM);
        jj_consume_token(LINK_DECL_LIT2);
        idList();
        jj_consume_token(LINK_DECL_LIT3);
        tokenSepTableSize = jj_consume_token(NUM);
        jj_consume_token(36);
                                childnum = Integer.parseInt( tokenChild.image );
                                parentnum = Integer.parseInt( tokenParent.image );
                                myJoinForest[parentnum][childnum] = true;
                                ++myChildCounts[parentnum];

                                myTotalSeparatorTableSize += Long.parseLong( tokenSepTableSize.image );
      }
    }

  }

  final public List[] assignmentsBlock(int numcliques) throws ParseException {
        List[] ret = new List[numcliques+1];
        for( int i=1; i<ret.length; i++ ) ret[i] = new LinkedList();

        Token tokenID;
        Token tokenCliqueNum;
        int cliqueNum;
    jj_consume_token(ASSIGNMENTS_LIT);
    label_9:
    while (true) {
      jj_consume_token(ASSIGNMENTS_DECL_LIT1);
      tokenID = jj_consume_token(ID);
      jj_consume_token(ASSIGNMENTS_DECL_LIT2);
      tokenCliqueNum = jj_consume_token(NUM);
                        cliqueNum = Integer.parseInt( tokenCliqueNum.image );
                        ret[cliqueNum].add( tokenID.image );
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNMENTS_DECL_LIT1:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_9;
      }
    }
                //Definitions.STREAM_VERBOSE.println( "\t assignmentsBlock()" );
                {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  public HuginLogReaderTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[15];
  final private int[] jj_la1_0 = {0x40,0x200,0x20000,0x80,0x6000,0x6000,0x1800,0x200,0x10000,0x0,0x0,0x80000,0x1000000,0x4000000,0x40000000,};
  final private int[] jj_la1_1 = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x1,0x0,0x0,0x0,0x0,};

  public HuginLogReader(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HuginLogReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public HuginLogReader(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new HuginLogReaderTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public HuginLogReader(HuginLogReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  public void ReInit(HuginLogReaderTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 15; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[37];
    for (int i = 0; i < 37; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 15; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
